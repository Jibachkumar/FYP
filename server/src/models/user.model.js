import mongoose, { Schema } from "mongoose";
import bcrypt from "bcrypt";
import jwt from "jsonwebtoken";
import { ApiError } from "../utils/apiError.js";
const userSchema = new Schema(
  {
    userName: {
      type: String,
      required: true,
      // unique: true,
      lowercase: true,
      trim: true,
      // index: true, // for database searching field
    },
    phoneNumber: {
      type: Number,
      required: true,
      unique: true,
    },
    email: {
      type: String,
      required: true,
      unique: true,
      lowercase: true,
      trim: true,
    },
    avatar: {
      type: String, // cloudinary url
      required: true,
    },
    coverImage: {
      type: String, // cloudinary url
    },
    password: {
      type: String,
      required: [true, "Password is required"],
    },
    refreshToken: {
      type: String,
    },
  },
  { timestamps: true }
);

// middleware: when user save data before that encrypt password then save
userSchema.pre("save", async function (next) {
  if (!this.isModified("password")) return next();

  this.password = await bcrypt.hash(this.password, 10);
  next();
});

// custom hooks/function: whenever user re login asked password is correct or not
userSchema.methods.isPasswordCorrect = async function (password) {
  return await bcrypt.compare(password, this.password);
};

// user access token generated by jwt
userSchema.methods.generateAccessToken = function () {
  return jwt.sign(
    {
      _id: this._id,
      email: this.email,
      userName: this.userName,
    },
    process.env.ACCESS_TOKEN_SECRET,
    {
      expiresIn: process.env.ACCESS_TOKEN_EXPIRY,
    }
  );
};

// user refresh token generated by jwt
userSchema.methods.generateRefreshToken = function () {
  return jwt.sign(
    {
      _id: this._id,
    },
    process.env.REFRESH_TOKEN_SECRET,
    {
      expiresIn: process.env.REFRESH_TOKEN_EXPIRY,
    }
  );
};

// caluclate price
userSchema.methods.calculatePrice = function (destination, people, duration) {
  let price = 0;
  // let day = [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20];

  const destinationName = {
    kathmandu: 2000,
    pokhara: 2000,
    mustang: 5000,
    tilcho: 6000,
    Bhaktapur: 1000,
    Patan: 1000,
    Chitwan: 1600,
    Lumbini: 2000,
    gorkha: 2000,
    Gosaikunda_Lake: 6000,
    Kanchenjunga: 8000,
    makalu: 8000,
    Annapurna_Base_Camp: 8000,
    Langtang_National_Park: 8000,
    Rara_Lake: 10000,
    Everest_Base_Camp: 20000,
    Manang: 5000,
    Tansen: 5000,
    Janakpur: 3000,
    Bardia_National_Park: 1600,
    Ilam: 3000,
  };

  if (!destinationName.hasOwnProperty(destination)) {
    throw new ApiError(404, "Destination not found");
  }

  if (duration === 2 || duration === 3) price += 5000;
  if (duration === 4 || duration === 7) price += 7000;
  if (duration === 8 || duration === 10) price += 10000;
  if (duration === 11 || duration === 15) price += 15000;
  if (duration === 16 || duration === 30) price += 20000;

  const finalPrice = destinationName[destination] * people + price;

  return finalPrice;
};

export const User = mongoose.model("User", userSchema);
