import mongoose, { Schema } from "mongoose";
import bcrypt from "bcrypt";
import jwt from "jsonwebtoken";
import { ApiError } from "../utils/apiError.js";
const userSchema = new Schema(
  {
    userName: {
      type: String,
      required: true,
      // unique: true,
      lowercase: true,
      trim: true,
      // index: true, // for database searching field
    },
    phoneNumber: {
      type: Number,
      required: true,
      unique: true,
    },
    email: {
      type: String,
      required: true,
      unique: true,
      lowercase: true,
      trim: true,
    },
    avatar: {
      type: String, // cloudinary url
      required: true,
    },
    coverImage: {
      type: String, // cloudinary url
    },
    password: {
      type: String,
      required: [true, "Password is required"],
    },
    refreshToken: {
      type: String,
    },
  },
  { timestamps: true }
);

// middleware: when user save data before that encrypt password then save
userSchema.pre("save", async function (next) {
  if (!this.isModified("password")) return next();

  this.password = await bcrypt.hash(this.password, 10);
  next();
});

// custom hooks/function: whenever user re login asked password is correct or not
userSchema.methods.isPasswordCorrect = async function (password) {
  return await bcrypt.compare(password, this.password);
};

// user access token generated by jwt
userSchema.methods.generateAccessToken = function () {
  return jwt.sign(
    {
      _id: this._id,
      email: this.email,
      userName: this.userName,
    },
    process.env.ACCESS_TOKEN_SECRET,
    {
      expiresIn: process.env.ACCESS_TOKEN_EXPIRY,
    }
  );
};

// user refresh token generated by jwt
userSchema.methods.generateRefreshToken = function () {
  return jwt.sign(
    {
      _id: this._id,
    },
    process.env.REFRESH_TOKEN_SECRET,
    {
      expiresIn: process.env.REFRESH_TOKEN_EXPIRY,
    }
  );
};

// caluclate price
userSchema.methods.calculatePrice = function (people, duration, price) {
  const durations = {
    2: 3000,
    3: 5000,
    4: 6000,
    5: 7000,
    6: 8000,
    7: 10000,
    8: 11000,
    9: 12000,
    10: 13000,
    11: 14000,
    12: 15000,
    13: 16000,
    14: 17000,
    15: 18000,
    16: 19000,
    17: 20000,
    18: 21000,
    19: 22000,
    20: 25000,
  };

  if (duration === 1) {
    return price * people;
  }

  if (!durations.hasOwnProperty(duration))
    throw new ApiError(
      404,
      "sorry we don't have long duration package available"
    );

  const finalPrice = price * people + durations[duration];

  return finalPrice;
};

export const User = mongoose.model("User", userSchema);
